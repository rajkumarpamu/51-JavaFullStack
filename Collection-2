Collection: (I)
-----------

List   (I)               
----
If we want to allow Duplicate objects
An ordered collection (also known as a sequence)
Resizable and Growable
ArrayList:-

boolean	add(E e)
Appends the specified element to the end of this list.

package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();
	
		//Added Elements to Collection Object
		list.add(new Integer(101));
		list.add(new Integer(102));
		list.add(new Integer(103));
		
		//Accessing the Collection object
		System.out.println(list);

	}

}



package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();

		// Added Elements to Collection Object
		// Auto Boxing
		list.add(101);
		list.add(102);
		list.add(103);

		// Accessing the Collection object
		System.out.println(list);

	}

}


[com.demo.collections.Employee@15db9742, com.demo.collections.Employee@6d06d69c, com.demo.collections.Employee@7852e922]

[Employee [id=101, name=raj], Employee [id=102, name=kumar], Employee [id=103, name=ravi]]


package com.demo.collections;

public class Employee {

	Integer id;
	String name;

	public Employee(Integer id, String name) {
		this.id = id;
		this.name = name;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + "]";
	}

}


package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		List<Employee> list = new ArrayList<Employee>();

		// Added Elements to Collection Object
		list.add(new Employee(new Integer(101), "raj"));
		list.add(new Employee(new Integer(102), "kumar"));
		list.add(new Employee(new Integer(103), "ravi"));

		// Accessing the Collection object
		System.out.println(list);

	}

}

Example 2:
----------


		List<Integer> list = new ArrayList<Integer>();

		// Added Elements to Collection Object
		// Duplicates Allowed
		list.add(new Integer(101));
		list.add(new Integer(101));
		list.add(new Integer(101));

		// Accessing the Collection object
		System.out.println(list);



boolean	add(E e)
================
Appends the specified element to the end of this list (optional operation).

void	add(int index, E element)
===================================
Inserts the specified element at the specified position in this list (optional operation).


package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		List<Integer> list = new ArrayList<Integer>();

		// Added Elements to Collection Object
		// Duplicates Allowed
		list.add(new Integer(101));
		list.add(new Integer(102));
		list.add(new Integer(103));

		// Accessing the Collection object
		System.out.println("Before :" + list);

		list.add(1, new Integer(104));

		// Accessing the Collection object
		System.out.println("After :" + list);

	}

}


boolean	addAll(Collection<? extends E> c)
==========================================
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).

package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		// Collection-1
		List<Integer> list1 = new ArrayList<Integer>();
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));

		// Collection-2
		List<Integer> list2 = new ArrayList<Integer>();
		list2.add(new Integer(104));
		list2.add(new Integer(105));
		list2.add(new Integer(106));

		// Accessing the Collection object
		System.out.println("List -1  :" + list1);
		// Accessing the Collection object
		System.out.println("List -2 :" + list2);

		list1.addAll(list2);

		System.out.println("Final List :" + list1);

	}

}




boolean	addAll(int index, Collection<? extends E> c)
====================================================
Inserts all of the elements in the specified collection into this list at the specified position (optional operation).


package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		// Collection-1
		List<Integer> list1 = new ArrayList<Integer>();
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));

		// Collection-2
		List<Integer> list2 = new ArrayList<Integer>();
		list2.add(new Integer(104));
		list2.add(new Integer(105));
		list2.add(new Integer(106));

		// Accessing the Collection object
		System.out.println("List -1  :" + list1);
		// Accessing the Collection object
		System.out.println("List -2 :" + list2);

		list1.addAll(0, list2);

		System.out.println("Final List :" + list1);

	}

}

E	set(int index, E element)
=============================

Replaces the element at the specified position in this list with the specified element (optional operation).

package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		// Collection-1
		List<Integer> list1 = new ArrayList<Integer>();
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));

		// Accessing the Collection object
		System.out.println("Before   :" + list1);

		list1.set(1, new Integer(104));

		System.out.println("Final List :" + list1);

	}

}


Before   :[101, 102, 103]
Final List :[101, 104, 103]


ArrayList()
============
Constructs an empty list with an initial capacity of ten.

package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		// Collection-1
		List<Integer> list1 = new ArrayList<Integer>();
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));

		// Accessing the Collection object
		System.out.println("Before   :" + list1);


	}

}


ArrayList(Collection<? extends E> c)
========================================
Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.

ArrayList(int initialCapacity)
=================================
Constructs an empty list with the specified initial capacity.

package com.demo.collections;

import java.util.ArrayList;
import java.util.List;

public class Demo {

	public static void main(String[] args) {

		// Collection-1
		List<Integer> list1 = new ArrayList<Integer>(3);
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		
		System.out.println("List details :"+list1);
		System.out.println(list1.size());
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));
		
		list1.add(new Integer(101));
		list1.add(new Integer(102));
		list1.add(new Integer(103));

		System.out.println("List details :"+list1);
		System.out.println(list1.size());


	}

}

Each ArrayList instance has a capacity.
 The capacity is the size of the array used to store the elements in the list. 
 It is always at least as large as the list size. 
 As elements are added to an ArrayList, its capacity grows automatically.
  The details of the growth policy are not specified beyond the fact that adding an element has constant amortized time cost.


The grow method in the ArrayList class gives the new size array. In Java 8 and later The new capacity is calculated which is 50% more than the old capacity and the array is increased by that capacity. 

An application can increase the capacity of an ArrayList instance before adding a large number of elements using the ensureCapacity operation. This may reduce the amount of incremental reallocation.

int newCapacity = (oldCapacity * 3)/2 + 1;

10

int newCapacity = (10*3)/2 + 1 16 

LinkedList :-
Stack:-
Vector :-

java.util.concurrent:
CopyOnWriteArrayList<E>

Set   (I)
-----
If we want to allow only Unique objects