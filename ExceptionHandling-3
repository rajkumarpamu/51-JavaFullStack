Exceptiion Handling:
--------------------


checked exception:
------------------

The class Exception and any subclasses that are not also subclasses of RuntimeException are checked exceptions.

Unchecked

java.lang.Object
java.lang.Throwable
java.lang.Exception
java.lang.RuntimeException
java.lang.NullPointerException


Checked:

java.lang.Object
java.lang.Throwable
java.lang.Exception
java.io.IOException

throws:
-------


throws <Exception Name>;


public void add()throws Exception{

	
}

Checked exceptions need to be declared in a method or constructor's throws clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary.

Signals that an I/O exception of some sort has occurred. Thisclass is the general class of exceptions produced by failed or nterrupted I/O operations

package com.demo.exceptionhandling;

import java.io.IOException;

public class App {

	public void readLine() throws IOException {
		System.out.println("Reading  the data");
	}

	public static void main(String[] args) throws IOException {

		App app = new App();
		app.readLine();

	}
}


package com.demo.exceptionhandling;

import java.io.IOException;

public class App {

	public void readLine() throws IOException {
		System.out.println("Reading  the data");
	}

	public static void main(String[] args) {

		App app = new App();
		try {
			app.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}


package com.demo.exceptionhandling;

import java.io.IOException;

public class App {

	public void readLine() throws IOException {
		System.out.println("Reading  the data");
	}

	public static void main(String[] args) {

		App app = new App();
		try {
			app.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ArithmeticException e) {
			e.printStackTrace();
		}

	}
}


package com.demo.exceptionhandling;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class App {


	public static void main(String[] args) throws IOException{


		 BufferedReader bufferedReader = 
				 new BufferedReader(new InputStreamReader(System.in));
		 
		 bufferedReader.readLine();

	}
}


package com.demo.exceptionhandling;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class App {

	public static void main(String[] args) {

		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

		try {
			bufferedReader.readLine();
		} catch (IOException e) {
			e.printStackTrace();
			//DB Call
			System.exit(0);
		}

	}
}


throw:
------
To explicitly throw our own exception object.

AgeNotValidException


package com.demo.exceptionhandling;

public class App {
	
	public void ageValidation(int age) {
		
		if(age >= 18)
			System.out.println("Eligible for voting");
		else 
			throw new ArithmeticException("Age is not valid");
		
		
	}

	public static void main(String[] args) {

		App app = new App();
		try {
		app.ageValidation(17);
		}
		catch(ArithmeticException e) {
			e.printStackTrace();
		}
		System.out.println("Validation COmpleted");

	}
}



Custom Excption"
-----------
AgeNotValidException


package com.demo.exceptionhandling;

public class AgeNotValidException extends RuntimeException {

	String message;

	AgeNotValidException(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		return "AgeNotValidException [message=" + message + "]";
	}

}



package com.demo.exceptionhandling;

public class App {
	
	public void ageValidation(int age) {
		
		if(age >= 18)
			System.out.println("Eligible for voting");
		else 
			throw new AgeNotValidException("Age is not valid");
		
		
	}

	public static void main(String[] args) {

		App app = new App();
		try {
		app.ageValidation(17);
		}
		catch(AgeNotValidException e) {
			e.printStackTrace();
		}
		System.out.println("Validation COmpleted");

	}
}


package com.demo.exceptionhandling;

public class App {
	
	public void ageValidation(int age) {
		
		if(age >= 18)
			System.out.println("Eligible for voting");
		else 
			throw new AgeNotValidException("Age is not valid");
		
		
	}

	public static void main(String[] args) {

		App app = new App();
		try {
		app.ageValidation(17);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		System.out.println("Validation COmpleted");

	}
}
