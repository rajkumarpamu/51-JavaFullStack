TreeSet:
-------
The elements are ordered using their natural ordering,or by a Comparator provided at set creation time, depending on which constructor is used.

1)Remove Duplicates
2)Sort

1  5  2  3  2  3

1  2  3  5 -> Removes Dupicates and Sorted


package com.demo.collections;

import java.util.TreeSet;

public class App {

	public static void main(String[] args) {

		TreeSet<Integer> treeSet = new TreeSet<>();
		treeSet.add(new Integer(1));
		treeSet.add(new Integer(3));
		treeSet.add(new Integer(3));
		treeSet.add(new Integer(2));
		treeSet.add(new Integer(1));
		treeSet.add(new Integer(5));
		treeSet.add(new Integer(4));

		System.out.println(treeSet); // Removed Duplicates and Sorted

	}

}



package com.demo.collections;

import java.util.HashSet;
import java.util.TreeSet;

public class App {

	public static void main(String[] args) {

		HashSet<Integer> set = new HashSet<>();
		set.add(new Integer(1));
		set.add(new Integer(3));
		set.add(new Integer(3));
		set.add(new Integer(2));
		set.add(new Integer(1));
		set.add(new Integer(5));
		set.add(new Integer(4));

		TreeSet<Integer> treeSet = new TreeSet<>(set);

		System.out.println(treeSet); // Removed Duplicates and Sorted

	}

}


Exception in thread "main" java.lang.ClassCastException: com.demo.collections.Employee cannot be cast to java.lang.Comparable
	at java.util.TreeMap.compare(TreeMap.java:1294)
	at java.util.TreeMap.put(TreeMap.java:538)
	at java.util.TreeSet.add(TreeSet.java:255)
	at com.demo.collections.App.main(App.java:13)


Comparable and Comparator:
-------------------------

public final class Integer
extends Number
implements Comparable<Integer>



This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class's natural ordering, and the class's compareTo method is referred to as its natural comparison method.

int	compareTo(T o)
Compares this object with the specified object for order.

[
 Employee [empId=1, empName=raj], 
 Employee [empId=2, empName=rahul],
 Employee [empId=3, empName=ravi], 
 Employee [empId=4, empName=rohit],
 Employee [empId=5, empName=ramesh]
]


a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.

[
Employee [empId=5, empName=ramesh], 
Employee [empId=4, empName=rohit], 
Employee [empId=3, empName=ravi],
Employee [empId=2, empName=rahul],
Employee [empId=1, empName=raj]
]

package com.demo.collections;

import java.util.Objects;

public class Employee implements Comparable<Employee>{

	@Override
	public int hashCode() {
		return Objects.hash(empId, empName);
	}

	@Override
	public boolean equals(Object obj) {
		Employee other = (Employee) obj;
		return Objects.equals(empId, other.empId)
				&& Objects.equals(empName, other.empName);
	}

	private Integer empId;
	private String empName;

	public Integer getEmpId() {
		return empId;
	}

	public void setEmpId(Integer empId) {
		this.empId = empId;
	}

	public Employee(Integer empId, String empName) {
		super();
		this.empId = empId;
		this.empName = empName;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", empName=" + empName + "]";
	}

	//Asending Order
	@Override
	public int compareTo(Employee o) {
		if(empId > o.getEmpId()) 
			return -1;
		else if(empId < o.getEmpId()) // 1 3
			return 1;
		else
		return 0;
	}

}




package com.demo.collections;

import java.util.HashSet;
import java.util.TreeSet;

public class App {

	public static void main(String[] args) {


		TreeSet<Employee> treeSet = new TreeSet<>();
		treeSet.add(new Employee(1, "raj"));//e1
		treeSet.add(new Employee(3, "ravi"));
		treeSet.add(new Employee(2, "rahul"));
		treeSet.add(new Employee(5, "ramesh"));
		treeSet.add(new Employee(4, "rohit"));
		treeSet.add(new Employee(1, "raj")); //e6
		treeSet.add(new Employee(3, "ravi"));
		treeSet.add(new Employee(2, "rahul"));
	
		System.out.println(treeSet); // Removed Duplicates and Sorted

	}

}


In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value of expression is negative, zero or positive.

 1 for greater
-1 for lesser
 0  ==

 Asecnding Order

 1 for lesser
-1 for greater
 0  ==

 Descending order

package com.demo.collections;

import java.util.HashSet;
import java.util.TreeSet;

public class App {

	public static void main(String[] args) {


		TreeSet<Employee> treeSet = new TreeSet<>();
		treeSet.add(new Employee(1, "raj"));//e1
		treeSet.add(new Employee(3, "ravi"));
		treeSet.add(new Employee(2, "rahul"));
		treeSet.add(new Employee(5, "ramesh"));
		treeSet.add(new Employee(4, "rohit"));
		treeSet.add(new Employee(1, "raj")); //e6
		treeSet.add(new Employee(3, "ravi"));
		treeSet.add(new Employee(2, "rahul"));
	
		System.out.println(treeSet); // Removed Duplicates and Sorted

	}

}



package com.demo.collections;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.TreeSet;

public class App {

	public static void main(String[] args) {

		List<Integer> list = new ArrayList<>();
		list.add(3);
		list.add(1);
		list.add(1);
		list.add(2);

		/*
		 * TreeSet set = new TreeSet<>(list); 
		 System.out.println(set);
		 */

		//Recomonded
		Collections.sort(list);

		System.out.println(list);

	}

}

















