
List  -> stream -> transformation  ->  transformation -> terminal operation
                   (Intermediate)      (Intermediate)


Stream<T>	filter(Predicate<? super T> predicate) -> Intermediate Operation

<R> Stream<R>	map(Function<? super T,? extends R> mapper) -> Intermediate Operaion

Stream<T>	distinct()
Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.

Stream<T>	sorted()

Optional<T>	reduce(BinaryOperator<T> accumulator)

Stream<T>	skip(long n)

IntStream	mapToInt(ToIntFunction<? super T> mapper) -> Intermediate oeration

<R,A> R collect(Collector<? super T,A,R> collector)


package com.demo.java8;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class App {

	public static void main(String[] args) {

		List<Employee> list = new ArrayList<>();
		list.add(new Employee("Raj", new Integer(1), new Double(100000)));
		list.add(new Employee("Ravi", new Integer(2), new Double(200000)));
		list.add(new Employee("Rahul", new Integer(3), new Double(300000)));
		list.add(new Employee("Ramesh", new Integer(4), new Double(400000)));

		List<Employee> collect = list.stream().filter(t -> t.getSalary() > 100000).collect(Collectors.toList());

		System.out.println(collect);

		// [Employee [name=Ravi, id=2, salary=200000.0],
		// Employee [name=Rahul, id=3, salary=300000.0],
		// Employee [name=Ramesh, id=4, salary=400000.0]]

	}

}



package com.demo.java8;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App {
	public static Employee maptoEmployee(Employee emp) {
		Employee employee = new  Employee();
		employee.setSalary(emp.getSalary()+5000);
		employee.setId(emp.getId());
		employee.setName(emp.getName());
		return employee;	
	} 

	public static void main(String[] args) {

		List<Employee> list = new ArrayList<>();
		list.add(new Employee("Raj", new Integer(1), new Double(100000)));
		list.add(new Employee("Ravi", new Integer(2), new Double(200000)));
		list.add(new Employee("Rahul", new Integer(3), new Double(300000)));
		list.add(new Employee("Ramesh", new Integer(4), new Double(400000)));

        Stream<Employee> stream = list.stream();
		Stream<Employee> filter = stream.filter(t -> t.getSalary() <= 200000);
		Stream<Employee> map = filter.map(t -> maptoEmployee(t));
		List<Employee> collect = map.collect(Collectors.toList());
		
		System.out.println(collect);
	
	}

}

package com.demo.java8;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App {
	public static Employee maptoEmployee(Employee emp) {
		Employee employee = emp;
		employee.setSalary(emp.getSalary()+5000);
		return employee;	
	} 

	public static void main(String[] args) {

		List<Employee> list = new ArrayList<>();
		list.add(new Employee("Raj", new Integer(1), new Double(100000)));
		list.add(new Employee("Ravi", new Integer(2), new Double(200000)));
		list.add(new Employee("Rahul", new Integer(3), new Double(300000)));
		list.add(new Employee("Ramesh", new Integer(4), new Double(400000)));

        Stream<Employee> stream = list.stream();
		Stream<Employee> filter = stream.filter(t -> t.getSalary() <= 200000);
		Stream<Employee> map = filter.map(t -> maptoEmployee(t));
		List<Employee> collect = map.collect(Collectors.toList());
		
		System.out.println(collect);
	
	}

}


package com.demo.java8;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class App {


	public static void main(String[] args) {


		List<String> list = Arrays.asList("1","2","4","5");
		List<Integer> collect = list
				.stream()
				.map(t -> Integer.parseInt(t))
				.collect(Collectors.toList());
		
		System.out.println(collect);
	
	}

}


Method references:
---------------------

Object :: methodName 


package com.demo.java8;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class App {


	public static void main(String[] args) {


		List<String> list = Arrays.asList("1","2","4","5");
		List<Integer> collect = list
				.stream()
			//	.map(t -> Integer.parseInt(t))
				.map(Integer :: parseInt) //Method references
				.collect(Collectors.toList());
		
		System.out.println(collect);
	
	}

}




Employee Object

 id
 name
 salry
 dept