Thread:
------

A thread is a thread or light weight sub process  of execution in a program.
The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.
Every thread has a priority. 
Threads with higher priority are executed in preference to threads with lower priority. 


Thread Class
Runnable Interface


Thread class:
-------------

1)Extends Thread class
2)Create Object to user defined class
3)Attach it to main thread
4)Invoke start()
5)start() will invoke run() of the Thread object

start():
Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.

package com.demo.mt;

public class UserThread extends Thread {
	
	@Override
	public void run() {
		System.out.println(Thread.currentThread());
	}
	
	public static void main(String[] args) {
		System.out.println(Thread.currentThread());
		//Create Object to user defined class
		UserThread userThread = new UserThread();
		//Attach it to Thread Object
		Thread thread = new Thread(userThread);
		//Invoke start()
		thread.start();
	}

}


package com.demo.mt;

public class UserThread extends Thread {
	
	@Override
	public void run() {
		System.out.println(Thread.currentThread());
	}
	
	public static void main(String[] args) {
		System.out.println(Thread.currentThread());
		//Create Object to user defined class
		UserThread userThread = new UserThread();
		//Attach it to Thread Object
		Thread thread = new Thread(userThread);
		//Invoke start()
		thread.start();
		thread.start();
	}

}


Thread[main,5,main]
Thread[Thread-1,5,main]
Exception in thread "main" java.lang.IllegalThreadStateException
	at java.lang.Thread.start(Thread.java:710)
	at com.demo.mt.UserThread.main(UserThread.java:18)

package com.demo.mt;

public class UserThread extends Thread {
	
	@Override
	public void run() {
		
		for(int i=0;i<=10;i++) {
			System.out.println(Thread.currentThread());
			System.out.println("i value is :"+i);
		}
	
	}
	
	public static void main(String[] args) {
		System.out.println(Thread.currentThread());
		//Create Object to user defined class
		UserThread userThread = new UserThread();
		//Attach it to Thread Object
		Thread thread = new Thread(userThread);
		//Invoke start()
		thread.start();
		
		//Attach it to Thread Object
		Thread thread1 = new Thread(userThread);
		//Invoke start()
		thread1.start();

	}

}


Thread[main,5,main]
Thread[Thread-1,5,main]
Thread[Thread-2,5,main]
i value is :0
i value is :0
Thread[Thread-1,5,main]
i value is :1
Thread[Thread-2,5,main]
i value is :1
Thread[Thread-2,5,main]
i value is :2
Thread[Thread-1,5,main]
i value is :2
Thread[Thread-2,5,main]
Thread[Thread-1,5,main]
i value is :3
i value is :3



package com.demo.mt;

public class UserThread extends Thread {

	@Override
	public void run() {
		m1();
		m2();
	}
	
	public void m1() {
		System.out.println("m1");
	}
	public void m2() {
		System.out.println("m2");
	}

	public static void main(String[] args) {
		System.out.println(Thread.currentThread());
		// Create Object to user defined class
		UserThread userThread = new UserThread();
		// Attach it to Thread Object
		Thread thread = new Thread(userThread);
		// Invoke start()
		thread.start();
	}

}


package com.demo.mt;

public class UserThread extends Thread {

	@Override
	public void run() {

		Thread t1 = Thread.currentThread();
		System.out.println(t1);
		System.out.println(t1.getName());
		System.out.println(t1.getPriority());
		System.out.println(t1.getThreadGroup().getName());
	

	}

	public static void main(String[] args) {
		// Create Object to user defined class
		UserThread userThread = new UserThread();
		// Attach it to Thread Object
		Thread thread = new Thread(userThread);
		thread.start();
		
		Thread thread1 = new Thread(userThread);
		thread1.start();
		System.out.println(Thread.MIN_PRIORITY);
		System.out.println(Thread.MAX_PRIORITY);
		System.out.println(Thread.NORM_PRIORITY);

	}

}
